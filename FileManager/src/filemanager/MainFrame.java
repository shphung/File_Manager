/**
 * File: MainFrame.java
 * Authors: Steven Phung, Daniel Tripp, Joseph Freedman
 * Class: CECS-544-01 - Software Test and Verification
 * 
 * Assignment: Semester Project
 * Due Date: April 20, 2022 @ 5pm
 * 
 * Purpose: This is the MainFrame which will contain all other panes and frames.
 */
package filemanager;

import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JInternalFrame;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeExpansionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

public class MainFrame extends javax.swing.JFrame {
    
    private ArrayList<JInternalFrame> windows;
    
    public MainFrame() {
        initComponents();
        initProperties();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aboutDialog = new javax.swing.JDialog();
        button_OK = new javax.swing.JButton();
        panel_About_ProgramName = new javax.swing.JPanel();
        label_About_ProgramName = new javax.swing.JLabel();
        panel_About_Names = new javax.swing.JPanel();
        label_About_Names = new javax.swing.JLabel();
        panel_Main = new javax.swing.JPanel();
        panel_Toolbar = new javax.swing.JPanel();
        comboBox_Drives = new javax.swing.JComboBox<>();
        button_Details = new javax.swing.JButton();
        button_Simple = new javax.swing.JButton();
        panel_Desktop = new javax.swing.JPanel();
        desktopPane = new javax.swing.JDesktopPane();
        label_Status = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        menu_File = new javax.swing.JMenu();
        menuItem_Rename = new javax.swing.JMenuItem();
        menuItem_Copy = new javax.swing.JMenuItem();
        menuItem_Delete = new javax.swing.JMenuItem();
        menuItem_Run = new javax.swing.JMenuItem();
        menuItem_Exit = new javax.swing.JMenuItem();
        menu_Tree = new javax.swing.JMenu();
        menuItem_Expand = new javax.swing.JMenuItem();
        menuItem_Collapse = new javax.swing.JMenuItem();
        menu_Window = new javax.swing.JMenu();
        menuItem_New = new javax.swing.JMenuItem();
        menuItem_Cascade = new javax.swing.JMenuItem();
        menu_Help = new javax.swing.JMenu();
        menuItem_Help = new javax.swing.JMenuItem();
        menuItem_About = new javax.swing.JMenuItem();

        aboutDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        aboutDialog.setTitle("About");
        aboutDialog.setMinimumSize(new java.awt.Dimension(500, 250));
        aboutDialog.setModal(true);

        button_OK.setText("OK");
        button_OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_OKActionPerformed(evt);
            }
        });

        label_About_ProgramName.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        label_About_ProgramName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_About_ProgramName.setText("CECS 544 File Manager");

        javax.swing.GroupLayout panel_About_ProgramNameLayout = new javax.swing.GroupLayout(panel_About_ProgramName);
        panel_About_ProgramName.setLayout(panel_About_ProgramNameLayout);
        panel_About_ProgramNameLayout.setHorizontalGroup(
            panel_About_ProgramNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_About_ProgramNameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_About_ProgramName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel_About_ProgramNameLayout.setVerticalGroup(
            panel_About_ProgramNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_About_ProgramNameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_About_ProgramName)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        label_About_Names.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_About_Names.setText("Copyright (c) 2022 : Steven Phung, Daniel Tripp, Joseph Freedman");

        javax.swing.GroupLayout panel_About_NamesLayout = new javax.swing.GroupLayout(panel_About_Names);
        panel_About_Names.setLayout(panel_About_NamesLayout);
        panel_About_NamesLayout.setHorizontalGroup(
            panel_About_NamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_About_NamesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_About_Names, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel_About_NamesLayout.setVerticalGroup(
            panel_About_NamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_About_NamesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_About_Names)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout aboutDialogLayout = new javax.swing.GroupLayout(aboutDialog.getContentPane());
        aboutDialog.getContentPane().setLayout(aboutDialogLayout);
        aboutDialogLayout.setHorizontalGroup(
            aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(aboutDialogLayout.createSequentialGroup()
                        .addComponent(button_OK)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panel_About_ProgramName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_About_Names, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        aboutDialogLayout.setVerticalGroup(
            aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aboutDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_About_ProgramName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_About_Names, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                .addComponent(button_OK)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CECS 544 - File Manager");
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setSize(new java.awt.Dimension(1280, 720));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        panel_Toolbar.setMinimumSize(new java.awt.Dimension(1280, 50));

        comboBox_Drives.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBox_Drives.setMinimumSize(new java.awt.Dimension(200, 38));
        comboBox_Drives.setPreferredSize(new java.awt.Dimension(200, 38));
        comboBox_Drives.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboBox_DrivesPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                comboBox_DrivesPopupMenuWillBecomeVisible(evt);
            }
        });
        panel_Toolbar.add(comboBox_Drives);

        button_Details.setText("Details");
        button_Details.setMaximumSize(new java.awt.Dimension(100, 38));
        button_Details.setMinimumSize(new java.awt.Dimension(100, 38));
        button_Details.setPreferredSize(new java.awt.Dimension(100, 38));
        panel_Toolbar.add(button_Details);

        button_Simple.setText("Simple");
        button_Simple.setMaximumSize(new java.awt.Dimension(100, 38));
        button_Simple.setMinimumSize(new java.awt.Dimension(100, 38));
        button_Simple.setPreferredSize(new java.awt.Dimension(100, 38));
        panel_Toolbar.add(button_Simple);

        panel_Desktop.setMinimumSize(new java.awt.Dimension(1280, 642));
        panel_Desktop.setPreferredSize(new java.awt.Dimension(1280, 642));

        desktopPane.setMinimumSize(new java.awt.Dimension(1280, 642));

        javax.swing.GroupLayout desktopPaneLayout = new javax.swing.GroupLayout(desktopPane);
        desktopPane.setLayout(desktopPaneLayout);
        desktopPaneLayout.setHorizontalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        desktopPaneLayout.setVerticalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 642, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panel_DesktopLayout = new javax.swing.GroupLayout(panel_Desktop);
        panel_Desktop.setLayout(panel_DesktopLayout);
        panel_DesktopLayout.setHorizontalGroup(
            panel_DesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panel_DesktopLayout.setVerticalGroup(
            panel_DesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        label_Status.setText("Current Drive:");
        label_Status.setMinimumSize(new java.awt.Dimension(1280, 16));
        label_Status.setPreferredSize(new java.awt.Dimension(1280, 16));

        javax.swing.GroupLayout panel_MainLayout = new javax.swing.GroupLayout(panel_Main);
        panel_Main.setLayout(panel_MainLayout);
        panel_MainLayout.setHorizontalGroup(
            panel_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_Toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panel_Desktop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panel_MainLayout.createSequentialGroup()
                .addComponent(label_Status, javax.swing.GroupLayout.PREFERRED_SIZE, 1149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panel_MainLayout.setVerticalGroup(
            panel_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_MainLayout.createSequentialGroup()
                .addComponent(panel_Toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_Desktop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(label_Status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(panel_Main, java.awt.BorderLayout.CENTER);

        menu_File.setText("File");

        menuItem_Rename.setText("Rename");
        menu_File.add(menuItem_Rename);

        menuItem_Copy.setText("Copy");
        menu_File.add(menuItem_Copy);

        menuItem_Delete.setText("Delete");
        menu_File.add(menuItem_Delete);

        menuItem_Run.setText("Run");
        menu_File.add(menuItem_Run);

        menuItem_Exit.setText("Exit");
        menuItem_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_ExitActionPerformed(evt);
            }
        });
        menu_File.add(menuItem_Exit);

        menuBar.add(menu_File);

        menu_Tree.setText("Tree");

        menuItem_Expand.setText("Expand Branch");
        menu_Tree.add(menuItem_Expand);

        menuItem_Collapse.setText("Collapse Branch");
        menu_Tree.add(menuItem_Collapse);

        menuBar.add(menu_Tree);

        menu_Window.setText("Window");

        menuItem_New.setText("New Window");
        menuItem_New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_NewActionPerformed(evt);
            }
        });
        menu_Window.add(menuItem_New);

        menuItem_Cascade.setText("Cascade Windows");
        menu_Window.add(menuItem_Cascade);

        menuBar.add(menu_Window);

        menu_Help.setText("Help");

        menuItem_Help.setText("Help");
        menu_Help.add(menuItem_Help);

        menuItem_About.setText("About");
        menuItem_About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_AboutActionPerformed(evt);
            }
        });
        menu_Help.add(menuItem_About);

        menuBar.add(menu_Help);

        setJMenuBar(menuBar);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //Clicking Menu's File > Exit exits program
    private void menuItem_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_ExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_menuItem_ExitActionPerformed

    //Clicking Menu's Help > About creates About dialog box 
    private void menuItem_AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_AboutActionPerformed
        aboutDialog.setLocationRelativeTo(null);
        aboutDialog.setVisible(true);
    }//GEN-LAST:event_menuItem_AboutActionPerformed

    //Destroys About dialog box
    private void button_OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_OKActionPerformed
        aboutDialog.dispose();
    }//GEN-LAST:event_button_OKActionPerformed

    //Opening combo box menu will update drivers
    private void comboBox_DrivesPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboBox_DrivesPopupMenuWillBecomeVisible
        //Gets currently selected item
        Object selectedItem = comboBox_Drives.getSelectedItem().toString();
        //Reloads
        reloadDrivers();
        //Displays previously selected item if new item not selected
        comboBox_Drives.setSelectedItem(selectedItem);
    }//GEN-LAST:event_comboBox_DrivesPopupMenuWillBecomeVisible

    //Closing combo box will select drive
    private void comboBox_DrivesPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboBox_DrivesPopupMenuWillBecomeInvisible
        if(comboBox_Drives.getSelectedItem() != null) {
            System.out.println(String.valueOf(comboBox_Drives.getSelectedItem()));
        }
    }//GEN-LAST:event_comboBox_DrivesPopupMenuWillBecomeInvisible

    private void menuItem_NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_NewActionPerformed
        //Update status bar to new window created
        updateStatus(String.valueOf(comboBox_Drives.getSelectedItem()));
        
        //Create internal frame
        JInternalFrame intFrame = new JInternalFrame(String.valueOf(comboBox_Drives.getSelectedItem()), true, true, true, true);
        //Add listener for internal frame
        addInternalFrameListener(intFrame);
        
        //Create tree
        JScrollPane tree = createRootTree(String.valueOf(comboBox_Drives.getSelectedItem()));
        
        //Create list
        //JScrollPane list = createList(String.valueOf(comboBox_Drives.getSelectedItem()));
        JTextArea list = new JTextArea(450, 400);   //Current substitute for list
        
        //Add tree to left side of split pane, list to right side of split pane
        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, true, tree, list);
        //Set divider location and immovable
        splitPane.setDividerLocation(150);
        splitPane.setEnabled(false);
        
        //Add split pane to internal frame
        intFrame.add(splitPane);
        
        //New internal window added in cascade style:
        intFrame.setBounds(25*windows.size() % 700, 25*windows.size() % 250, 600, 400);
        
        //Internal frame cannot be resized
        intFrame.setResizable(true);
        intFrame.setVisible(true);
        
        //Add internal frame to main frame window, send frame to front
        windows.add(intFrame);
        desktopPane.add(windows.get(windows.size()-1));
        windows.get(windows.size()-1).toFront();
        
        //Remove any frames that were closed
        for(int i = 0; i < windows.size(); i++) { 		      
            if(!windows.get(i).isVisible()) {
                windows.remove(i);
            }
        }
    }//GEN-LAST:event_menuItem_NewActionPerformed

    //Frame size changed by maximizing (iconified) / minimizing (deiconified)
    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        resizeInternalWindow();
    }//GEN-LAST:event_formWindowStateChanged

    //Frame size changed by clicking and dragging
    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        resizeInternalWindow();
    }//GEN-LAST:event_formComponentResized
    
    //Resizes internal frame window whenever frame size changes
    private void resizeInternalWindow() {
        int heightOtherComponents = 140;
        panel_Desktop.setPreferredSize(new Dimension(this.getWidth(), this.getHeight()-heightOtherComponents));
        desktopPane.setPreferredSize(new Dimension(this.getWidth(), this.getHeight()-heightOtherComponents));
        panel_Desktop.setSize(new Dimension(this.getWidth(), this.getHeight()-heightOtherComponents));
        desktopPane.setSize(new Dimension(this.getWidth(), this.getHeight()-heightOtherComponents));
    }
    
    //InternalFrameListener
    private void addInternalFrameListener(JInternalFrame intFrame) {
        intFrame.addInternalFrameListener(new InternalFrameListener() {
            @Override
            public void internalFrameOpened(InternalFrameEvent e) {
                
            }
            @Override
            public void internalFrameClosing(InternalFrameEvent e) {
                
            }
            @Override
            public void internalFrameClosed(InternalFrameEvent e) {
                
            }
            @Override
            public void internalFrameIconified(InternalFrameEvent e) {
                
            }
            @Override
            public void internalFrameDeiconified(InternalFrameEvent e) {
                
            }
            //When internal frame gains focus, update status bar for that window
            @Override
            public void internalFrameActivated(InternalFrameEvent e) {
                updateStatus(intFrame.getTitle());
            }
            @Override
            public void internalFrameDeactivated(InternalFrameEvent e){
                
            }
        });
    }
    
    //Create a scroll pane containing tree structure representing the entire folder structure
    private JScrollPane createRootTree(String root) {
        //Create root node, treemodel, and tree
        DefaultMutableTreeNode top = new DefaultMutableTreeNode(root);
        DefaultTreeModel treeModel = new DefaultTreeModel(top);
        JTree tree = new JTree(treeModel);
        
        //Add tree listener to navigate using mouse
        addTreeListener(tree);
        
        //Set icons for tree
        DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) tree.getCellRenderer();
        Icon openIcon = new ImageIcon(System.getProperty("user.dir") + "\\src\\resources\\open.png");
        Icon closedIcon = new ImageIcon(System.getProperty("user.dir") + "\\src\\resources\\closed.png");
        //Directories that have subdirectories have an empty dummy node so the system registers
        //it as a ClosedDirectory (otherwise it is seen as leaf)
        renderer.setOpenIcon(openIcon);
        renderer.setClosedIcon(openIcon);
        renderer.setLeafIcon(closedIcon);

        //Add directories as nodes to tree
        createNodes(root, top);
        //Expand tree one level
        expandNodes(tree, top);
        //Return scrollpane containing tree
        return new JScrollPane(tree);
    }
    
    //Treelistener for expansion 
    private void addTreeListener(JTree tree) {
        tree.addTreeExpansionListener(new TreeExpansionListener() {
            //When tree is expanded 
            @Override
            public void treeExpanded(TreeExpansionEvent event) {
                //Get tree model
                DefaultTreeModel model = (DefaultTreeModel) tree.getModel();
                
                //Get node that was clicked on
                TreePath tp = event.getPath();
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) tp.getLastPathComponent();
                
                //Build string of absolute file path for node that was clicked on
                StringBuilder sb = new StringBuilder();
                for(int i = 0; i < tp.getPath().length; i++) {
                    //Add "\" for example: "C:\Documents" becomes "C:\Documents\AnotherFolder"
                    if(i > 1) {
                        sb.append("\\").append(tp.getPath()[i].toString());
                    } else {
                        sb.append(tp.getPath()[i].toString());
                    }
                }
                
                //Remove the dummy node
                node.removeAllChildren();
                //Add nodes to current node with found directories using file path
                createNodes(sb.toString(), node);
                //Expand tree a level
                expandNodes(tree, node);
                //Reload tree
                model.reload(node);
            }

            @Override
            public void treeCollapsed(TreeExpansionEvent event) {
                
            }
        });
        //When a node is selected in the tree (will want to update right side)
        tree.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
            public void valueChanged(TreeSelectionEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        });
    }
    
    //Expands 1 level of nodes
    private void expandNodes(JTree tree, DefaultMutableTreeNode top) {
        DefaultMutableTreeNode currentNode = top;
        do {
            if (currentNode.getLevel() == 0)
                tree.expandPath(new TreePath(currentNode.getPath()));
            currentNode = currentNode.getNextNode();
        } while (currentNode != null);
    }
    
    //Takes current node and adds any subdirectories to tree
    private void createNodes(String root, DefaultMutableTreeNode top) {
        //Get list of files in current directory
        File fileRoot = new File(root);
        File[] files = fileRoot.listFiles();
        if(files == null) {
            return;
        }
        //For each file in directory, check if there is a subdirectory
        for(File file : files) {
            String fileName = file.toString().substring(file.toString().lastIndexOf("\\") + 1);
            DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(fileName);
            //If there is a subdirectory, add it to the tree
            if(file.isDirectory()) {
                top.add(newNode);
                File[] subFiles = file.listFiles();
                //Checking subdirectory's files for diretories (for correct rendering)
                if(subFiles != null) {
                    for(File subfiles : subFiles) {
                        //If there is a folder inside subdirectory, add dummy node
                        if(subfiles.isDirectory()) {
                            DefaultMutableTreeNode emptyNode = new DefaultMutableTreeNode();
                            newNode.add(emptyNode);
                        }
                    }
                }
            }
        }
    }

    //Updates status bar based on currently selected drive
    public void updateStatus(String root) {
        //No drive selected yet
        if(root.equals("none")){
            label_Status.setText("Current Drive: None selected.");
        } else {
            //Gets path
            String selectedDrive = String.valueOf(root);   
            File[] drives = File.listRoots();
            for (File drive : drives) {
                //For selected driver get attributes
                if(String.valueOf(drive).equals(selectedDrive)) {
                    long freeSpace = drive.getFreeSpace()/(1024*1024*1024);
                    long totalSpace = drive.getTotalSpace()/(1024*1024*1024);
                    long usedSpace = totalSpace - freeSpace;
                    //Update label to display attributes
                    label_Status.setText("Current Drive: " + drive + "     Free Space: " + freeSpace + "GB     Used Space: " + usedSpace + "GB     Total Space: " + totalSpace + "GB");
                }
            }
        }
    }
    
    //Reloads drivers in combobox
    private void reloadDrivers() {
        comboBox_Drives.removeAllItems();
        File[] paths = File.listRoots();
        for(File path:paths) {
            comboBox_Drives.addItem(path.toString());
        }
    }
    
    //Initializes features and properties needed for main frame
    private void initProperties() {
        //Desktop Pane's windows
        windows = new ArrayList<>();
        //Load drivers in comboBox
        reloadDrivers();
        //Initialize status bar
        updateStatus("none");
        //Shows window
        this.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog aboutDialog;
    private javax.swing.JButton button_Details;
    private javax.swing.JButton button_OK;
    private javax.swing.JButton button_Simple;
    private javax.swing.JComboBox<String> comboBox_Drives;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JLabel label_About_Names;
    private javax.swing.JLabel label_About_ProgramName;
    private javax.swing.JLabel label_Status;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuItem_About;
    private javax.swing.JMenuItem menuItem_Cascade;
    private javax.swing.JMenuItem menuItem_Collapse;
    private javax.swing.JMenuItem menuItem_Copy;
    private javax.swing.JMenuItem menuItem_Delete;
    private javax.swing.JMenuItem menuItem_Exit;
    private javax.swing.JMenuItem menuItem_Expand;
    private javax.swing.JMenuItem menuItem_Help;
    private javax.swing.JMenuItem menuItem_New;
    private javax.swing.JMenuItem menuItem_Rename;
    private javax.swing.JMenuItem menuItem_Run;
    private javax.swing.JMenu menu_File;
    private javax.swing.JMenu menu_Help;
    private javax.swing.JMenu menu_Tree;
    private javax.swing.JMenu menu_Window;
    private javax.swing.JPanel panel_About_Names;
    private javax.swing.JPanel panel_About_ProgramName;
    private javax.swing.JPanel panel_Desktop;
    private javax.swing.JPanel panel_Main;
    private javax.swing.JPanel panel_Toolbar;
    // End of variables declaration//GEN-END:variables
}
